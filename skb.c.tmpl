/*
 * Copyright (c) 2014-2016 ISPRAS (http://www.ispras.ru)
 * Institute for System Programming of the Russian Academy of Sciences
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * ee the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <verifier/common.h>
#include <verifier/nondet.h>

struct clk;

// for arg_sign in clk2_arg_signs
/* NOTE Initialize counters to zero */
int ldv_prepare_count{{ arg_sign.id }} = 0;
int ldv_enable_count{{ arg_sign.id }} = 0;

/* MODEL_FUNC Unprepare clock */
void ldv_clk_unprepare{{ arg_sign.id }}(struct clk *clk)
{
    /* ASSERT WARN_ON(clk->prepare_count == 0) */
    ldv_assert("linux:drivers:clk2::less initial decrement", ldv_prepare_count{{ arg_sign.id }} > 0);
    /* NOTE Decrease prepare counter */
    ldv_prepare_count{{ arg_sign.id }}--;
}

/* MODEL_FUNC Prepare clock */
int ldv_clk_prepare{{ arg_sign.id }}(void)
{
	int retval = ldv_undef_int();
	if (!retval) {
		/* NOTE Increase prepare counter */
		ldv_prepare_count{{ arg_sign.id }}++;
	} else {
		ldv_assume(retval < 0);
	}
	return retval;
}

/* MODEL_FUNC Disable clock */
void ldv_clk_disable{{ arg_sign.id }}(struct clk *clk)
{
    /* ASSERT WARN_ON(clk->enable_count == 0) */
    ldv_assert("linux:drivers:clk2::less initial decrement", ldv_enable_count{{ arg_sign.id }} > 0);
    /* NOTE Decrease enable counter */
    ldv_enable_count{{ arg_sign.id }}--;
}

/* MODEL_FUNC Enable clock */
int ldv_clk_enable{{ arg_sign.id }}(void)
{
	int retval = ldv_undef_int();
	if (!retval) {
		/* NOTE Increase enable counter */
		ldv_enable_count{{ arg_sign.id }}++;
	} else {
		ldv_assume(retval < 0);
	}
	return retval;
}

/* MODEL_FUNC Prepare enable clock */
int ldv_clk_prepare_enable{{ arg_sign.id }}(void)
{
int ret;

	ret = ldv_clk_prepare{{ arg_sign.id }}();
	if (ret)
		return ret;
	return ldv_clk_enable{{ arg_sign.id }}();
}

// endfor
